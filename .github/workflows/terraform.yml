name: Terraform Deploy to Environment

on:
  push:
    branches:
      - main  # Trigger only on pushes to the main branch
    paths:
      - 'Environments/DEV/**'  # Trigger on changes in dev environment directory
      - 'Environments/UAT/**'  # Trigger on changes in staging environment directory
      - 'Environments/QA/**'  # Trigger on changes in prod environment directory
      - 'Environments/PROD/**'  # Trigger on changes in test environment directory

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.10.2'  # Change to your Terraform version

      - name: Check for Changes and Deploy to Environment
        run: |
          # Determine which environment has changed
          changed_dir=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^environments/(dev|staging|prod|test)/' | head -n 1)

          if [[ -z "$changed_dir" ]]; then
            echo "No relevant environment changes detected. Skipping deployment."
            exit 0
          fi

          # Set the environment based on the modified directory
          environment=$(echo "$changed_dir" | cut -d'/' -f2)

          echo "Changes detected in environment: $environment"

          # Fetch the environment-specific role ARN from GitHub Environment secrets
          ROLE_ARN=${{ secrets["ROLE_ARN_${environment^^}"] }}  # Fetch from GitHub Secrets

          if [[ -z "$ROLE_ARN" ]]; then
            echo "Error: No role ARN found for environment '$environment'."
            exit 1
          fi

          echo "Assuming role: $ROLE_ARN"

          # Use AWS CLI to assume the role and retrieve temporary credentials
          CREDS=$(aws sts assume-role --role-arn "$ROLE_ARN" --role-session-name terraform-session)
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r .Credentials.AccessKeyId)
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r .Credentials.SecretAccessKey)
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r .Credentials.SessionToken)

          # Run Terraform commands for the detected environment
          cd environments/$environment
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan
