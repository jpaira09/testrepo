name: Terraform test

on:
  push:
    branches:
      - main
    paths:
      - 'Environments/DEV/**'
      - 'Environments/UAT/**'
      - 'Environments/QA/**'
      - 'Environments/PROD/**'

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.10.2'

      - name: Check changed files in the latest commit
        run: |
          echo "Changed files in the latest commit:"
          git diff --name-only HEAD^ HEAD
          echo "Checking for changes in Environments directories"

          # Check for any changes in the relevant environment directories
          changed_files=$(git diff --name-only HEAD^ HEAD | grep -E '^Environments/(DEV|UAT|QA|PROD)/')

          if [[ -z "$changed_files" ]]; then
            echo "No relevant environment changes detected. Skipping deployment."
            exit 0
          fi

          echo "Changes detected in files: $changed_files"

          # Determine the environment based on the modified directory
          changed_dir=$(echo "$changed_files" | head -n 1)
          environment=$(echo "$changed_dir" | cut -d'/' -f2)

          echo "Changes detected in environment: $environment"

          # Map environment to the appropriate secret name
          if [ "$environment" == "DEV" ]; then
            ROLE_ARN=${{ secrets.ROLE_ARN_DEV }}
          elif [ "$environment" == "UAT" ]; then
            ROLE_ARN=${{ secrets.ROLE_ARN_UAT }}
          elif [ "$environment" == "QA" ]; then
            ROLE_ARN=${{ secrets.ROLE_ARN_QA }}
          elif [ "$environment" == "PROD" ]; then
            ROLE_ARN=${{ secrets.ROLE_ARN_PROD }}
          else
            echo "Error: Unknown environment '$environment'."
            exit 1
          fi

          echo "Assuming role: $ROLE_ARN"

          # Configure AWS credentials using GitHub OIDC
          - name: Set up AWS credentials using GitHub OIDC
            uses: aws-actions/configure-aws-credentials@v1
            with:
              role-to-assume: $ROLE_ARN
              aws-region: ap-south-1  # Replace with your region

          # Run Terraform commands for the detected environment
          cd Environments/$environment
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan
